"""Retrying tables, avoid user postgrest problem

Revision ID: 509fd8ebe4ee
Revises: c9ef212ce88b
Create Date: 2018-10-17 03:44:42.139899

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '509fd8ebe4ee'
down_revision = 'c9ef212ce88b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Communities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('Users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=80), nullable=False),
    sa.Column('google_id', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('Debates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('title', sa.String(length=1000), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('text', sa.String(length=1000000), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['Communities.id'], ),
    sa.ForeignKeyConstraint(['creator_id'], ['Users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Users_communities',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('community_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['community_id'], ['Communities.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], )
    )
    op.create_table('Posts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('title', sa.String(length=1000), nullable=False),
    sa.Column('text', sa.String(length=1000000), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('debate_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['debate_id'], ['Debates.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('Post')
    op.drop_table('Debate')
    op.drop_table('User_community')
    op.drop_table('User')
    op.drop_table('Community')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('User',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"User_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('create_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('google_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='User_pkey'),
    sa.UniqueConstraint('name', name='User_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('Debate',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Debate_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('create_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('text', sa.VARCHAR(length=1000000), autoincrement=False, nullable=False),
    sa.Column('creator_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('community_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['Community.id'], name='Debate_community_id_fkey'),
    sa.ForeignKeyConstraint(['creator_id'], ['User.id'], name='Debate_creator_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='Debate_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('Post',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Post_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('create_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('text', sa.VARCHAR(length=1000000), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('debate_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['debate_id'], ['Debate.id'], name='Post_debate_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], name='Post_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='Post_pkey')
    )
    op.create_table('User_community',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('community_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['community_id'], ['Community.id'], name='User_community_community_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], name='User_community_user_id_fkey')
    )
    op.create_table('Community',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Community_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('create_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Community_pkey'),
    sa.UniqueConstraint('name', name='Community_name_key')
    )
    op.drop_table('Posts')
    op.drop_table('Users_communities')
    op.drop_table('Debates')
    op.drop_table('Users')
    op.drop_table('Communities')
    # ### end Alembic commands ###
